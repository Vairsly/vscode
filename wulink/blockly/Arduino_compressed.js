// Do not edit this file; automatically generated by build.py.
'use strict';


// Copyright 2012 Google Inc.  Apache License 2.0
Blockly.Arduino=new Blockly.Generator("Arduino");
Blockly.Arduino.addReservedWords("and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,not,or,pass,print,raise,return,try,while,with,yield,True,False,None,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,abs,divmod,input,open,staticmethod,all,enumerate,int,ord,str,any,eval,isinstance,pow,sum,basestring,execfile,issubclass,print,super,bin,file,iter,property,tuple,bool,filter,len,range,type,bytearray,float,list,raw_input,unichr,callable,format,locals,reduce,unicode,chr,frozenset,long,reload,vars,classmethod,getattr,map,repr,xrange,cmp,globals,max,reversed,zip,compile,hasattr,memoryview,round,__import__,complex,hash,min,set,apply,delattr,help,next,setattr,buffer,dict,hex,object,slice,coerce,dir,id,oct,sorted,intern");
Blockly.Arduino.ORDER_ATOMIC=0;
Blockly.Arduino.ORDER_COLLECTION=1;
Blockly.Arduino.ORDER_STRING_CONVERSION=1;
Blockly.Arduino.ORDER_MEMBER=2.1;
Blockly.Arduino.ORDER_FUNCTION_CALL=2.2;
Blockly.Arduino.ORDER_EXPONENTIATION=3;
Blockly.Arduino.ORDER_UNARY_SIGN=4;
Blockly.Arduino.ORDER_BITWISE_NOT=4;
Blockly.Arduino.ORDER_MULTIPLICATIVE=5;
Blockly.Arduino.ORDER_ADDITIVE=6;
Blockly.Arduino.ORDER_BITWISE_SHIFT=7;
Blockly.Arduino.ORDER_BITWISE_AND=8;
Blockly.Arduino.ORDER_BITWISE_XOR=9;
Blockly.Arduino.ORDER_BITWISE_OR=10;
Blockly.Arduino.ORDER_RELATIONAL=11;
Blockly.Arduino.ORDER_LOGICAL_NOT=12;
Blockly.Arduino.ORDER_LOGICAL_AND=13;
Blockly.Arduino.ORDER_LOGICAL_OR=14;
Blockly.Arduino.ORDER_CONDITIONAL=15;
Blockly.Arduino.ORDER_LAMBDA=16;
Blockly.Arduino.ORDER_NONE=99;
Blockly.Arduino.ORDER_OVERRIDES=[[Blockly.Arduino.ORDER_FUNCTION_CALL,Blockly.Arduino.ORDER_MEMBER],[Blockly.Arduino.ORDER_FUNCTION_CALL,Blockly.Arduino.ORDER_FUNCTION_CALL],[Blockly.Arduino.ORDER_MEMBER,Blockly.Arduino.ORDER_MEMBER],[Blockly.Arduino.ORDER_MEMBER,Blockly.Arduino.ORDER_FUNCTION_CALL],[Blockly.Arduino.ORDER_LOGICAL_NOT,Blockly.Arduino.ORDER_LOGICAL_NOT],[Blockly.Arduino.ORDER_LOGICAL_AND,Blockly.Arduino.ORDER_LOGICAL_AND],[Blockly.Arduino.ORDER_LOGICAL_OR,Blockly.Arduino.ORDER_LOGICAL_OR]];
Blockly.Arduino.init=function(a) {
	//Blockly.Arduino.PASS=this.INDENT+"pass\n";
	Blockly.Arduino.definitions_=Object.create(null);
	//Blockly.Arduino.functionNames_=Object.create(null);
	Blockly.Arduino.setups_=Object.create(null);
	Blockly.Arduino.variableDB_?Blockly.Arduino.variableDB_.reset():Blockly.Arduino.variableDB_=new Blockly.Names(Blockly.Arduino.RESERVED_WORDS_);
};
Blockly.Arduino.finish = function (a) {
	// Indent every line.
	a = '  ' + a.replace(/\n/g, '\n  ');
	a = a.replace(/\n\s+$/, '\n');
  	a = 'void loop() \n{\n' + a + '\n}';

	// Convert the definitions dictionary into a list.
	var imports = [];
	var definitions_var = []; //变量定义
	var definitions_fun = []; //函数定义
	for (var name in Blockly.Arduino.definitions_) {
		var def = Blockly.Arduino.definitions_[name];
		if (def.match(/^#include/)) {
			imports.push(def);
		} else if (name.match(/^var_declare/)) {
			definitions_var.push(def);
		} else {
			definitions_fun.push(def);
		}
	}
	// Convert the setups dictionary into a list.
	var setups = [];
	for (var name in Blockly.Arduino.setups_) {
		setups.push(Blockly.Arduino.setups_[name]);
	}
	var allDefs = imports.join('\n') + '\n\n' + definitions_var.join('\n') + '\n\n' + definitions_fun.join('\n') + '\n\nvoid setup() \n{\n  ' + setups.join('\n  ') + '\n}' + '\n\n';
	return allDefs.replace(/\n\n+/g, '\n\n').replace(/\n*$/, '\n\n') + a;
// return(b.join("\n")+"\n\n"+c.join("\n\n")).replace(/\n\n+/g,"\n\n").replace(/\n*$/,"\n\n\n")+a

};
Blockly.Arduino.scrubNakedValue=function(a) {
	return a+"\n"
};
Blockly.Arduino.quote_=function(a) {a=a.replace(/\\/g,"\\\\").replace(/\n/g,"\\\n").replace(/\%/g,"\\%").replace(/'/g,"\\'").replace(/"/g,"\\\"");
return'"'+a+'"'};
Blockly.Arduino.scrub_=function(a,b){
	var c="";
	if(!a.outputConnection||!a.outputConnection.targetConnection){var d=a.getCommentText();(d=Blockly.utils.wrap(d,Blockly.Arduino.COMMENT_WRAP-3))&&(c=a.getProcedureDef?c+('/*'+d+'\n*/\n'):c+Blockly.Arduino.prefixLines(d+"\n","// "));
	for(var e=0;e<a.inputList.length;e++)a.inputList[e].type==Blockly.INPUT_VALUE&&(d=a.inputList[e].connection.targetBlock())&&(d=Blockly.Arduino.allNestedComments(d))&&(c+=Blockly.Arduino.prefixLines(d,"# "))}
	e=a.nextConnection&&a.nextConnection.targetBlock();
	e=Blockly.Arduino.blockToCode(e);
	return c+b+e
};
Blockly.Arduino.getAdjustedInt=function(a,b,c,d){
	c=c||0;a.workspace.options.oneBasedIndex&&c--;
	var e=a.workspace.options.oneBasedIndex?"1":"0";
	a=Blockly.Arduino.valueToCode(a,b,c?Blockly.Arduino.ORDER_ADDITIVE:Blockly.Arduino.ORDER_NONE)||e;
	Blockly.isNumber(a)?(a=parseInt(a,10)+c,d&&(a=-a)):(a=0<c?"int("+a+" + "+c+")":0>c?"int("+a+" - "+-c+")":"int("+a+")",d&&(a="-"+a));
	return a
};
Blockly.Arduino.lists={};

Blockly.Arduino.lists_create_empty=function(a){return["[]",Blockly.Arduino.ORDER_ATOMIC]};
Blockly.Arduino.lists_create_with=function(a){
	var dropdown_type = a.getFieldValue('TYPE');
  var varName = a.getFieldValue('VAR');
  //var size=window.parseFloat(this.getFieldValue('SIZE'));
	  var code = new Array(a.itemCount_);
  for (var n = 0; n < a.itemCount_; n++) {
    code[n] = Blockly.Arduino.valueToCode(a, 'ADD' + n,
        Blockly.Arduino.ORDER_NONE) || '0';
  }
  Blockly.Arduino.definitions_['var_lists'+varName] = dropdown_type+' '+varName+'[]'+'='+ '{' + code.join(', ') + '};\n';
  return '';
	// for(var b=Array(a.itemCount_),c=0;c<a.itemCount_;c++)
		// b[c]=Blockly.Arduino.valueToCode(a,"ADD"+c,Blockly.Arduino.ORDER_NONE)||"None";
	// Blockly.Arduino.definitions_.lists_create_with="import random";
	// return["["+b.join(", ")+"]",Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.lists_create_num=function(a){
	var dropdown_type = a.getFieldValue('TYPE');
  var varName = a.getFieldValue('VAR');
  var size=a.getFieldValue('SIZE');
	Blockly.Arduino.definitions_['var_lists'+varName] = dropdown_type+' '+varName+'['+size+'];\n';
  return '';
};
Blockly.Arduino.lists_length=function(a){
	  var varName = a.getFieldValue('VAR');
	return['sizeof('+varName+')/sizeof('+varName+'[0])',Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.lists_isEmpty=function(a){
	return["not len("+(Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||"[]")+")",Blockly.Arduino.ORDER_LOGICAL_NOT]
};
Blockly.Arduino.lists_indexOf=function(a){
	var b=Blockly.Arduino.valueToCode(a,"FIND",Blockly.Arduino.ORDER_NONE)||"[]",c=Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||"''";
	if(a.workspace.options.oneBasedIndex)
		var d=" 0",e=" + 1",f="";
	else d=" -1",e="",f=" - 1";
	if("FIRST"==a.getFieldValue("END"))
		return a=Blockly.Arduino.provideFunction_("first_index",["def "+Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_+"(my_list, elem):","  try: index = my_list.index(elem)"+e,"  except: index ="+d,"  return index"]),[a+"("+c+", "+b+")",Blockly.Arduino.ORDER_FUNCTION_CALL];
	a=Blockly.Arduino.provideFunction_("last_index",["def "+Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_+"(my_list, elem):","  try: index = len(my_list) - my_list[::-1].index(elem)"+f,"  except: index ="+d,"  return index"]);
	return[a+"("+c+", "+b+")",Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.lists_getIndex = function() {
  // Indexing into a list is the same as indexing into a string.
  var varName = this.getFieldValue('VAR');
  var argument0 = Blockly.Arduino.valueToCode(this, 'AT',
      Blockly.Arduino.ORDER_ADDITIVE) || '1';
  if (argument0.match(/^\d+$/)) {
    // If the index is a naked number, decrement it right now.
    argument0 = parseInt(argument0, 10) - 1;
  } else {
    // If the index is dynamic, decrement it in code.
    argument0 += ' - 1';
  }
  var code=varName+'[(int)('+argument0+')]';
  return [code,Blockly.Arduino.ORDER_ATOMIC];
};

Blockly.Arduino.lists_setIndex = function() {
  // Set element at index.
  var varName = this.getFieldValue('VAR');
  var argument0 = Blockly.Arduino.valueToCode(this, 'AT',
      Blockly.Arduino.ORDER_ADDITIVE) || '1';
  var argument2 = Blockly.Arduino.valueToCode(this, 'TO',
      Blockly.Arduino.ORDER_ASSIGNMENT) || '0';
  // Blockly uses one-based indicies.
  if (argument0.match(/^\d+$/)) {
    // If the index is a naked number, decrement it right now.
    argument0 = parseInt(argument0, 10) - 1;
  } else {
    // If the index is dynamic, decrement it in code.
    argument0 += ' - 1';
  }
  return varName + '[(int)(' + argument0 + ')] = ' + argument2 + ';\n';
};


Blockly.Arduino.lists_sort=function(a){
	var b=Blockly.Arduino.valueToCode(a,"LIST",Blockly.Arduino.ORDER_NONE)||"[]",c=a.getFieldValue("TYPE");
	a="1"===a.getFieldValue("DIRECTION")?"False":"True";
	return[Blockly.Arduino.provideFunction_("lists_sort",["def "+Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_+"(my_list, type, reverse):","  def try_float(s):","    try:","      return float(s)","    except:","      return 0","  key_funcs = {",'    "NUMERIC": try_float,','    "TEXT": str,','    "IGNORE_CASE": lambda s: str(s).lower()',"}","  key_func = key_funcs[type]","  list_cpy = list(my_list)","  return sorted(list_cpy, key=key_func, reverse=reverse)"])+"("+b+', "'+c+'", '+a+")",Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.lists_split=function(a){
	var b=a.getFieldValue("MODE");
	if("SPLIT"==b)
		b=Blockly.Arduino.valueToCode(a,"INPUT",Blockly.Arduino.ORDER_MEMBER)||"''",a=Blockly.Arduino.valueToCode(a,"DELIM",Blockly.Arduino.ORDER_NONE),a=b+".split("+a+")";
	else if("JOIN"==b)
		b=Blockly.Arduino.valueToCode(a,"INPUT",Blockly.Arduino.ORDER_NONE)||"[]",a=Blockly.Arduino.valueToCode(a,"DELIM",Blockly.Arduino.ORDER_MEMBER)||"''",a=a+".join("+b+")";
	else throw"Unknown mode: "+b;
	return[a,Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.math={};
Blockly.Arduino.addReservedWords('setup,loop,if,else,for,switch,case,while,do,break,continue,return,goto,define,include,HIGH,LOW,INPUT,OUTPUT,INPUT_PULLUP,true,false,interger, constants,floating,point,void,bookean,char,unsigned,byte,int,short,word,long,float,double,string,String,array,static, volatile,const,sizeof,pinMode,digitalWrite,digitalRead,analogReference,analogRead,analogWrite,tone,noTone,shiftOut,shitIn,pulseIn,millis,micros,delay,delayMicroseconds,min,max,abs,constrain,map,pow,sqrt,sin,cos,tan,randomSeed,random,lowByte,highByte,bitRead,bitWrite,bitSet,bitClear,bit,attachInterrupt,detachInterrupt,interrupts,noInterrupts,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15');
Blockly.Arduino.math_number=function(a){
	a=parseFloat(a.getFieldValue("NUM"));
	var b;
	Infinity==a?(a='float("inf")',b=Blockly.Arduino.ORDER_FUNCTION_CALL):-Infinity==a?(a='-float("inf")',b=Blockly.Arduino.ORDER_UNARY_SIGN):b=0>a?Blockly.Arduino.ORDER_UNARY_SIGN:Blockly.Arduino.ORDER_ATOMIC;
	return[a,b]
};
Blockly.Arduino.math_arithmetic=function(a){
	var b={ADD:[" + ",Blockly.Arduino.ORDER_ADDITIVE],MINUS:[" - ",Blockly.Arduino.ORDER_ADDITIVE],MULTIPLY:[" * ",Blockly.Arduino.ORDER_MULTIPLICATIVE],DIVIDE:[" / ",Blockly.Arduino.ORDER_MULTIPLICATIVE],POWER:[" ** ",Blockly.Arduino.ORDER_EXPONENTIATION]}[a.getFieldValue("OP")],c=b[0],b=b[1],d=Blockly.Arduino.valueToCode(a,"A",b)||"0";
	a=Blockly.Arduino.valueToCode(a,"B",b)||"0";return[d+c+a,b]
};

Blockly.Arduino.math_map=function(block){
	var num = Blockly.Arduino.valueToCode(block, 'num', Blockly.Arduino.ORDER_ATOMIC);
	var min1= Blockly.Arduino.valueToCode(block, 'min1', Blockly.Arduino.ORDER_ATOMIC);
	var min2 = Blockly.Arduino.valueToCode(block, 'min2', Blockly.Arduino.ORDER_ATOMIC);
	var max1 = Blockly.Arduino.valueToCode(block, 'max1', Blockly.Arduino.ORDER_ATOMIC);
	var max2 = Blockly.Arduino.valueToCode(block, 'max2', Blockly.Arduino.ORDER_ATOMIC);
	var code = 'map('+num+','+min1+','+min2+','+max1+','+max2+')';
	return [code, Blockly.Arduino.ORDER_MEMBER];
};
Blockly.Arduino.math_single=function(a){
	var b=a.getFieldValue("OP"),c;
	if("NEG"==b)return c=Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_UNARY_SIGN)||"0",["-"+c,Blockly.Arduino.ORDER_UNARY_SIGN];
	a="SIN"==b||"COS"==b||"TAN"==b?Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_MULTIPLICATIVE)||"0":Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_NONE)||"0";
	switch(b){
		case "ABS":c="abs("+a+")";break;
		case "ROOT":c="sqrt("+a+")";break;
		case "LN":c="log("+a+")";break;
		case "LOG10":c="log10("+a+")";break;
		case "EXP":c="exp("+a+")";break;
		case "POW10":c="pow(10,"+a+")";break;
		case "ROUND":c="round("+a+")";break;
		case "ROUNDUP":c="ceil("+a+")";break;
		case "ROUNDDOWN":c="floor("+a+")";break;
		case "SIN":c="sin("+a+" / 180.0 * PI)";break;
		case "COS":c="cos("+a+" / 180.0 * PI)";break;
		case "TAN":c="tan("+a+" / 180.0 * PI)"}
	if(c)return[c,Blockly.Arduino.ORDER_FUNCTION_CALL];
	switch(b){
		case "ASIN":c="asin("+a+") / PI * 180";break;
		case "ACOS":c="acos("+a+") / PI * 180";break;
		case "ATAN":c="atan("+a+") / PI * 180";break;
		default:throw"Unknown math operator: "+b;}
	return[c,Blockly.Arduino.ORDER_MULTIPLICATIVE]
};

Blockly.Arduino.math_modulo=function(a) {
	var b=Blockly.Arduino.valueToCode(a,"DIVIDEND",Blockly.Arduino.ORDER_MULTIPLICATIVE)||"0";
	a=Blockly.Arduino.valueToCode(a,"DIVISOR",Blockly.Arduino.ORDER_MULTIPLICATIVE)||"0";
	return[b+" % "+a,Blockly.Arduino.ORDER_MULTIPLICATIVE]
};
Blockly.Arduino.math_constrain=function(a) {
	var b=Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||"0",c=Blockly.Arduino.valueToCode(a,"LOW",Blockly.Arduino.ORDER_NONE)||"0";
	a=Blockly.Arduino.valueToCode(a,"HIGH",Blockly.Arduino.ORDER_NONE)||"float('inf')";
	return["min(max("+b+", "+c+"), "+a+")",Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.math_random_int=function(a) {
	var b=Blockly.Arduino.valueToCode(a,"FROM",Blockly.Arduino.ORDER_NONE)||"0";
	a=Blockly.Arduino.valueToCode(a,"TO",Blockly.Arduino.ORDER_NONE)||"0";
	return["random("+b+", "+a+")",Blockly.Arduino.ORDER_FUNCTION_CALL]
};
      Blockly.Arduino.variables= {};
Blockly.Arduino.variables_get=function(a) {
	return[Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE),Blockly.Arduino.ORDER_ATOMIC]
};
Blockly.Arduino.variables_set=function(a) {
	var b=Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||"0";
	return Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE)+" = "+b+";\n"
};
Blockly.Arduino.variables_declare=function(a) {
	var b=Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||"0";
	var dropdown_io = a.getFieldValue('ioinput');
	var va = Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE);
	Blockly.Arduino.definitions_['variables_declare'+va]=dropdown_io+' '+va+' = '+b+';\n';
  var code = '	\n';
  return code;
};
       Blockly.Arduino.colour= {};
Blockly.Arduino.colour_picker=function(a) {
	return["'"+a.getFieldValue("COLOUR")+"'",Blockly.Arduino.ORDER_ATOMIC]
};

Blockly.Arduino.colour_rgb=function(a) {
	var b=Blockly.Arduino.provideFunction_("colour_rgb",["def "+Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_+"(r, g, b):","  r = round(min(100, max(0, r)) * 2.55)","  g = round(min(100, max(0, g)) * 2.55)","  b = round(min(100, max(0, b)) * 2.55)","  return '#%02x%02x%02x' % (r, g, b)"]),c=Blockly.Arduino.valueToCode(a,"RED",Blockly.Arduino.ORDER_NONE)||0,d=Blockly.Arduino.valueToCode(a,"GREEN",Blockly.Arduino.ORDER_NONE)||0;
	a=Blockly.Arduino.valueToCode(a,"BLUE",Blockly.Arduino.ORDER_NONE)||
	  0;
	return[b+"("+c+", "+d+", "+a+")",Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.colour_blend=function(a) {
	var b=Blockly.Arduino.provideFunction_("colour_blend",["def "+Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_+"(colour1, colour2, ratio):","  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)","  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)","  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)","  ratio = min(1, max(0, ratio))","  r = round(r1 * (1 - ratio) + r2 * ratio)","  g = round(g1 * (1 - ratio) + g2 * ratio)","  b = round(b1 * (1 - ratio) + b2 * ratio)",
	                                      "  return '#%02x%02x%02x' % (r, g, b)"]),c=Blockly.Arduino.valueToCode(a,"COLOUR1",Blockly.Arduino.ORDER_NONE)||"'#000000'",d=Blockly.Arduino.valueToCode(a,"COLOUR2",Blockly.Arduino.ORDER_NONE)||"'#000000'";
	a=Blockly.Arduino.valueToCode(a,"RATIO",Blockly.Arduino.ORDER_NONE)||0;
	return[b+"("+c+", "+d+", "+a+")",Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.procedures= {};
Blockly.Arduino.procedures_defreturn=function(a) {
	// for(var b=[],c=0,d; d=a.workspace.variableList[c]; c++) {
		// -1==a.arguments_.indexOf(d)&&b.push(Blockly.Arduino.variableDB_.getName(d,Blockly.Variables.NAME_TYPE));
	// }
	var b=[],c=0,d;
	//b=b.length?"  global "+b.join(", ")+"\n":"";
	d=Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"),Blockly.Procedures.NAME_TYPE);
	var e=Blockly.Arduino.statementToCode(a,"STACK");
	Blockly.Arduino.STATEMENT_PREFIX&&(e=Blockly.Arduino.prefixLines(Blockly.Arduino.STATEMENT_PREFIX.replace(/%1/g,'\'' + a.id + '\''),Blockly.Arduino.INDENT)+e);
	Blockly.Arduino.INFINITE_LOOP_TRAP&&(e=Blockly.Arduino.INFINITE_LOOP_TRAP.replace(/%1/g,'\'' + a.id + '\'')+e);
	var f=Blockly.Arduino.valueToCode(a,"RETURN",Blockly.Arduino.ORDER_NONE)||"";
	var type=a.getFieldValue('TYPE');
  if (f) {
    f = '  return ' + f + ';\n';
  }
  var returnType = f ? type : 'void';
	//f?f="  return "+f+";\n":e;
	for(var g=[],c=0; c<a.arguments_.length; c++) {
		g[c]=a.argumentstype_[c]+' '+Blockly.Arduino.variableDB_.getName(a.arguments_[c],Blockly.Variables.NAME_TYPE);
	}
	b=returnType+' '+d+"("+g.join(", ")+"){\n"+b+e+f+'}\n';
	b=Blockly.Arduino.scrub_(a,b);
	Blockly.Arduino.definitions_["%"+d]=b;
	return null
};
       Blockly.Arduino.procedures_defnoreturn=Blockly.Arduino.procedures_defreturn;
Blockly.Arduino.procedures_callreturn=function(a) {
	for(var b=Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"),Blockly.Procedures.NAME_TYPE),c=[],d=0; d<a.arguments_.length; d++) {
		c[d]=Blockly.Arduino.valueToCode(a,"ARG"+d,Blockly.Arduino.ORDER_NONE)||"0";
	}
	return[b+"("+c.join(", ")+")",Blockly.Arduino.ORDER_FUNCTION_CALL]
};
Blockly.Arduino.procedures_callnoreturn=function(a) {
	for(var b=Blockly.Arduino.variableDB_.getName(a.getFieldValue("NAME"),Blockly.Procedures.NAME_TYPE),c=[],d=0; d<a.arguments_.length; d++) {
		c[d]=Blockly.Arduino.valueToCode(a,"ARG"+d,Blockly.Arduino.ORDER_NONE)||"0";
	}
	return b+"("+c.join(", ")+");\n"
};
Blockly.Arduino.procedures_ifreturn=function(a) {
	var b="if ("+(Blockly.Arduino.valueToCode(a,"CONDITION",Blockly.Arduino.ORDER_NONE)||"0")+"){\n";
a.hasReturnValue_?(a=Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||"0",b+="  return "+a+";}\n"):b+="  return;}\n";
	return b
};
       Blockly.Arduino.texts= {};
Blockly.Arduino.text=function(a) {
	return[Blockly.Arduino.quote_(a.getFieldValue("TEXT")),Blockly.Arduino.ORDER_ATOMIC]
};

Blockly.Arduino.text_char = function() {
  var code = '\''+this.getFieldValue('TEXT')+'\'';
  return [code, Blockly.Arduino.ORDER_ATOMIC];
};
Blockly.Arduino.text_join=function(a) {
		var b=Blockly.Arduino.valueToCode(a,"ADD0",Blockly.Arduino.ORDER_NONE)||'""';
		a=Blockly.Arduino.valueToCode(a,"ADD1",Blockly.Arduino.ORDER_NONE)||'""';
		return["String("+b+") + String("+a+")",Blockly.Arduino.ORDER_ADDITIVE];
};
Blockly.Arduino.text_append=function(a) {
	var b=Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE);
	a=Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_NONE)||"''";
	return b+" = str("+b+") + str("+a+")\n"
       };
Blockly.Arduino.text_length=function(a) {
	return[(Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||"''")+".length()",Blockly.Arduino.ORDER_FUNCTION_CALL]
      };
Blockly.Arduino.text_isEmpty=function(a) {
	var a = Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||'""';
	return['String('+a+')',Blockly.Arduino.ORDER_LOGICAL_NOT]
      };
Blockly.Arduino.text_toint=function(a) {
	var a = Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||'""';
	return[a+'.toInt()',Blockly.Arduino.ORDER_LOGICAL_NOT]
      };
Blockly.Arduino.text_indexOf=function(a) {
	//var b="FIRST"==a.getFieldValue("END")?"find":"rfind",c=Blockly.Arduino.valueToCode(a,"FIND",Blockly.Arduino.ORDER_NONE)||"''",b=(Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_MEMBER)||"''")+"."+b+"("+c+")";
	//return a.workspace.options.oneBasedIndex?[b+" + 1",Blockly.Arduino.ORDER_ADDITIVE]:[b,Blockly.Arduino.ORDER_FUNCTION_CALL]
	var value = Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||'""';
	var num = Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_NONE)||'0';
	var find = Blockly.Arduino.valueToCode(a,"FIND",Blockly.Arduino.ORDER_NONE)||'\'\'';
	return[value+'.indexOf('+find+','+num+')']
};
Blockly.Arduino.text_substring=function(a) {
	//var b="FIRST"==a.getFieldValue("END")?"find":"rfind",c=Blockly.Arduino.valueToCode(a,"FIND",Blockly.Arduino.ORDER_NONE)||"''",b=(Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_MEMBER)||"''")+"."+b+"("+c+")";
	//return a.workspace.options.oneBasedIndex?[b+" + 1",Blockly.Arduino.ORDER_ADDITIVE]:[b,Blockly.Arduino.ORDER_FUNCTION_CALL]
	var value = Blockly.Arduino.valueToCode(a,"VALUE",Blockly.Arduino.ORDER_NONE)||'""';
	var num = Blockly.Arduino.valueToCode(a,"NUM",Blockly.Arduino.ORDER_NONE)||'0';
	var find = Blockly.Arduino.valueToCode(a,"FIND",Blockly.Arduino.ORDER_NONE)||'0';
	return[value+'.substring('+num+','+find+')']
};


Blockly.Arduino.text_changeCase=function(a) {
var b= {UPPERCASE:".upper()"
        ,LOWERCASE:".lower()"
        ,TITLECASE:".title()"
	       } [a.getFieldValue("CASE")];
	return[(Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_MEMBER)||"''")+b,Blockly.Arduino.ORDER_FUNCTION_CALL]
      };
Blockly.Arduino.text_trim=function(a) {
var b= {LEFT:".lstrip()"
        ,RIGHT:".rstrip()"
        ,BOTH:".strip()"
	       } [a.getFieldValue("MODE")];
	return[(Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_MEMBER)||"''")+b,Blockly.Arduino.ORDER_FUNCTION_CALL]
      };
Blockly.Arduino.text_print=function(a) {
	return"print("+(Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_NONE)||"''")+")\n"
      };
Blockly.Arduino.text_prompt_ext=function(a) {
	var b=Blockly.Arduino.provideFunction_("text_prompt",["def "+Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_+"(msg):","  try:","    return raw_input(msg)","  except NameError:","    return input(msg)"]),c=a.getField("TEXT")?Blockly.Arduino.quote_(a.getFieldValue("TEXT")):Blockly.Arduino.valueToCode(a,"TEXT",Blockly.Arduino.ORDER_NONE)||"''",b=b+"("+c+")"; "NUMBER"
	==a.getFieldValue("TYPE")&&(b="float("+b+")");
	return[b,Blockly.Arduino.ORDER_FUNCTION_CALL]
      };
      Blockly.Arduino.text_prompt=Blockly.Arduino.text_prompt_ext;
                                 Blockly.Arduino.loops= {};
Blockly.Arduino.controls_repeat_ext=function(a) {
	var b=a.getField("TIMES")?String(parseInt(a.getFieldValue("TIMES"),10)):Blockly.Arduino.valueToCode(a,"TIMES",Blockly.Arduino.ORDER_NONE)||"0",b=Blockly.isNumber(b)?parseInt(b,10):"int("+b+")",c=Blockly.Arduino.statementToCode(a,"DO"),c=Blockly.Arduino.addLoopTrap(c,a.id);
	return"for(int i=0;i<"+b+";i++){\n"+c+"\n}\n"
      };

Blockly.Arduino.controls_repeat=Blockly.Arduino.controls_repeat_ext;
Blockly.Arduino['controls_repeat1'] = function(a) {
  Blockly.Arduino.definitions_['haodabit1'] = '#include "Arduino.h"\n#include "Wire.h"\n#include "Servo.h"\n#include "SoftwareSerial.h"';
  var d=Blockly.Arduino.statementToCode(a,"DO"),d=Blockly.Arduino.addLoopTrap(d,a.id);
  //var c=Blockly.Arduino.statementToCode(a,"set");
  //var b=Blockly.Arduino.statementToCode(a,"sat");
  
  //var value_value = a.getFieldValue('valueout');
  //var code = "void loop(){\n"+d+'\n}\n';
  return d;
};
Blockly.Arduino.setup = function(a) {
	var d=Blockly.Arduino.statementToCode(a,"DO"),d=Blockly.Arduino.addLoopTrap(d,a.id);
  Blockly.Arduino.setups_['haodabit'] = d;

};
Blockly.Arduino.controls_whileUntil=function(a) {
	var b="UNTIL"==a.getFieldValue("MODE"),c=Blockly.Arduino.valueToCode(a,"BOOL",b?Blockly.Arduino.ORDER_LOGICAL_NOT:Blockly.Arduino.ORDER_NONE)||"0",d=Blockly.Arduino.statementToCode(a,"DO"),d=Blockly.Arduino.addLoopTrap(d,a.id);
	b&&(c="!"+c);
	return"while("+c+"){\n"+d+"\n}\n"
      };
Blockly.Arduino.controls_for=function(a) {
	var b=Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE),c=Blockly.Arduino.valueToCode(a,"FROM",Blockly.Arduino.ORDER_NONE)||"0",d=Blockly.Arduino.valueToCode(a,"TO",Blockly.Arduino.ORDER_NONE)||"0",e=Blockly.Arduino.valueToCode(a,"BY",Blockly.Arduino.ORDER_NONE)||"1",f=Blockly.Arduino.statementToCode(a,"DO"),f=Blockly.Arduino.addLoopTrap(f,a.id),g="",h=function() {
		return Blockly.Arduino.provideFunction_("upRange",
		                                       ["def "+Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_+"(start, stop, step):","  while start <= stop:","    yield start","    start += abs(step)"])
	},k=function() {
		return Blockly.Arduino.provideFunction_("downRange",["def "+Blockly.Arduino.FUNCTION_NAME_PLACEHOLDER_+"(start, stop, step):","  while start >= stop:","    yield start","    start -= abs(step)"])
	       };
	a=function(a,b,c) {
		return"("+a+" <= "+b+") and "+h()+"("+a+", "+b+", "+c+") or "+k()+"("+a+", "+b+", "+c+")"
	      };
	if(Blockly.isNumber(c)&&Blockly.isNumber(d)&&
	Blockly.isNumber(e)) {
		c=parseFloat(c),d=parseFloat(d),e=Math.abs(parseFloat(e)),0===c%1&&0===d%1&&0===e%1?(c<=d?(d++,a=0==c&&1==e?d:c+", "+d,1!=e&&(a+=", "+e)):(d--,a=c+", "+d+", -"+e),a="range("+a+")"):(a=c<d?h():k(),a+="("+c+", "+d+", "+e+")");
	} else {
		var l=function(a,c) {
			if(Blockly.isNumber(a)) {
				a=parseFloat(a);
			} else if(a.match(/^\w+$/)) {
				a="float("+a+")";
			} else {
				var d=Blockly.Arduino.variableDB_.getDistinctName(b+c,Blockly.Variables.NAME_TYPE);
				g+=d+" = float("+a+")\n";
				a=d
			  }
			  return a
		         },c=l(c,"_start"),d=l(d,"_end");
		l(e,"_inc");
		a="number"==typeof c&&"number"==typeof d?c<d?h(c,d,e):k(c,d,e):a(c,d,e)
		  }
	  return g+="for "+b+" in "+a+":\n"+f
            };
Blockly.Arduino.controls_forEach=function(a) {
	var b=Blockly.Arduino.variableDB_.getName(a.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE),c=Blockly.Arduino.valueToCode(a,"LIST",Blockly.Arduino.ORDER_RELATIONAL)||"[]",d=Blockly.Arduino.statementToCode(a,"DO"),d=Blockly.Arduino.addLoopTrap(d,a.id);
	return"for "+b+" in "+c+":\n"+d
      };
Blockly.Arduino.controls_flow_statements=function(a) {
	switch(a.getFieldValue("FLOW")) {
	case "BREAK":
		return"break;\n";
	case "CONTINUE":
		return"continue;\n"
	      }
	      throw"Unknown flow statement.";
};
Blockly.Arduino.logic= {};
Blockly.Arduino.controls_if=function(a) {
	var b=0,c="",d,e;
	do {
		e=Blockly.Arduino.valueToCode(a,"IF"+b,Blockly.Arduino.ORDER_NONE)||"0",d=Blockly.Arduino.statementToCode(a,"DO"+b),c+=(0==b?"if(":"else if(")+e+"){\n"+d+"\n}\n",++b;
	} while(a.getInput("IF"+b));
	a.getInput("ELSE")&&(d=Blockly.Arduino.statementToCode(a,"ELSE"),c+="else{\n"+d+"\n}\n");
	return c
       };
Blockly.Arduino.logic_compare=function(a) {
var b= {EQ:"=="
        ,NEQ:"!="
        ,LT:"<"
        ,LTE:"<="
        ,GT:">"
        ,GTE:">="
	       } [a.getFieldValue("OP")],c=Blockly.Arduino.ORDER_RELATIONAL,d=Blockly.Arduino.valueToCode(a,"A",c)||"0";
	a=Blockly.Arduino.valueToCode(a,"B",c)||"0";
	return[d+" "+b+" "+a,c]
      };
Blockly.Arduino.logic_operation=function(a) {
	var b="AND"==a.getFieldValue("OP")?"&":"|",c="&"==b?Blockly.Arduino.ORDER_LOGICAL_AND:Blockly.Arduino.ORDER_LOGICAL_OR,d=Blockly.Arduino.valueToCode(a,"A",c);
	a=Blockly.Arduino.valueToCode(a,"B",c);
	if(d||a) {
		var e="&"==b?"1":"0";
		d||(d=e);
		a||(a=e)
	} else {
		a=d="0";
	}
	return['('+d+") "+b+" ("+a+')',c]
      };
Blockly.Arduino.logic_negate=function(a) {
	return["! "+(Blockly.Arduino.valueToCode(a,"BOOL",Blockly.Arduino.ORDER_LOGICAL_NOT)||"1"),Blockly.Arduino.ORDER_LOGICAL_NOT]
      };
Blockly.Arduino.logic_boolean=function(a) {
	return["TRUE"==a.getFieldValue("BOOL")?"True":"False",Blockly.Arduino.ORDER_ATOMIC]
      };
Blockly.Arduino.logic_null=function(a) {
	return["None",Blockly.Arduino.ORDER_ATOMIC]
      };
Blockly.Arduino.logic_ternary=function(a) {
	var b=Blockly.Arduino.valueToCode(a,"IF",Blockly.Arduino.ORDER_CONDITIONAL)||"False",c=Blockly.Arduino.valueToCode(a,"THEN",Blockly.Arduino.ORDER_CONDITIONAL)||"None";
	a=Blockly.Arduino.valueToCode(a,"ELSE",Blockly.Arduino.ORDER_CONDITIONAL)||"None";
	return[c+" if "+b+" else "+a,Blockly.Arduino.ORDER_CONDITIONAL]
      };